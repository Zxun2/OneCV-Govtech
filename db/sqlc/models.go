// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0

package db

import (
	"database/sql/driver"
	"fmt"
)

type StudentsStatus string

const (
	StudentsStatusSuspended StudentsStatus = "suspended"
	StudentsStatusActive    StudentsStatus = "active"
)

func (e *StudentsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StudentsStatus(s)
	case string:
		*e = StudentsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for StudentsStatus: %T", src)
	}
	return nil
}

type NullStudentsStatus struct {
	StudentsStatus StudentsStatus
	Valid          bool // Valid is true if StudentsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStudentsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.StudentsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StudentsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStudentsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StudentsStatus), nil
}

type Register struct {
	TID int64 `json:"t_id"`
	SID int64 `json:"s_id"`
}

type Student struct {
	ID     int64          `json:"id"`
	Email  string         `json:"email"`
	Status StudentsStatus `json:"status"`
}

type Teacher struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}
