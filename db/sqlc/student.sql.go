// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: student.sql

package db

import (
	"context"
	"database/sql"
)

const createStudent = `-- name: CreateStudent :execresult
INSERT INTO students (
  email
) VALUES (
  ?
)
`

func (q *Queries) CreateStudent(ctx context.Context, email string) (sql.Result, error) {
	return q.exec(ctx, q.createStudentStmt, createStudent, email)
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students
WHERE id = ?
`

func (q *Queries) DeleteStudent(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteStudentStmt, deleteStudent, id)
	return err
}

const getStudent = `-- name: GetStudent :one
SELECT id, email, status FROM students
WHERE id = ? LIMIT 1
`

func (q *Queries) GetStudent(ctx context.Context, id int64) (Student, error) {
	row := q.queryRow(ctx, q.getStudentStmt, getStudent, id)
	var i Student
	err := row.Scan(&i.ID, &i.Email, &i.Status)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT id, email, status FROM students
WHERE status = 'active'
ORDER BY email
`

func (q *Queries) ListStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.query(ctx, q.listStudentsStmt, listStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Student{}
	for rows.Next() {
		var i Student
		if err := rows.Scan(&i.ID, &i.Email, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
