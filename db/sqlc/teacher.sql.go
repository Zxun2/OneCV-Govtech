// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: teacher.sql

package db

import (
	"context"
	"database/sql"
)

const createTeacher = `-- name: CreateTeacher :execresult
INSERT INTO teachers (
  email
) VALUES (
  ?
)
`

func (q *Queries) CreateTeacher(ctx context.Context, email string) (sql.Result, error) {
	return q.exec(ctx, q.createTeacherStmt, createTeacher, email)
}

const deleteTeacher = `-- name: DeleteTeacher :exec
DELETE FROM teachers
WHERE id = ?
`

func (q *Queries) DeleteTeacher(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteTeacherStmt, deleteTeacher, id)
	return err
}

const getTeacher = `-- name: GetTeacher :one
SELECT id, email FROM teachers
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTeacher(ctx context.Context, id int64) (Teacher, error) {
	row := q.queryRow(ctx, q.getTeacherStmt, getTeacher, id)
	var i Teacher
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const listTeachers = `-- name: ListTeachers :many
SELECT id, email FROM teachers
ORDER BY email
`

func (q *Queries) ListTeachers(ctx context.Context) ([]Teacher, error) {
	rows, err := q.query(ctx, q.listTeachersStmt, listTeachers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Teacher{}
	for rows.Next() {
		var i Teacher
		if err := rows.Scan(&i.ID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
